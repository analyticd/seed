(sprout :demo-sheet :system (:DESCRIPTION 
			     "This is demoSheet, a package created to demonstrate Seed's spreadsheet module."
			     :AUTHOR "Andrew Sengul" :LICENSE "GPL-3.0")
        :package ((:use :common-lisp :seed-lib-table) (:export))
        :branches
        ((stage (in (set-time))
                (out (set-type :stage) (stage) (codec)))
         (main (in (contingencies :sheet-lock)
		   (stage-params :contextual-menu
				 (:insert-add-op :insert-mult-op))
                   (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
                                 (:then (set-time)
                                        (if-condition (is-display-format) (:then (codec)))
                                        (form) (fork-to :history) (put-image)
                                        (if-condition (is-param :save)
                                                      (:then (put-file (table-specs (get-file :-self)) :-self)
                                                             (set-stable) (in-branch :cells (put-image nil)))
                                                      (:else (if-condition (is-param :revert)
						                           (:then (nullify-image)
                                                                                  (set-stable) (fork-to :history))
						                           (:else (set-stable :not))))))))
               (out (set-type :form)
	            (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
		            	  (set-meta :locked nil)
				  (set-meta :locked t))
                    (if-condition (is-image :not)
                                  (:then (put-image (table-specs (get-file :-self)))
                                         (set-time) (fork-to :history) (codec))
       	                          (:else (set-data (get-image)) (form)
                                         (if-condition (is-param :to-display)
                                                       (:then (codec)))))))
         (cells (in (contingencies :sheet-lock)
                    (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
                                  (:then (set-time)
                                         (if-condition (is-param :from-history)
                                                       (:then (put-image))
                                                       (:else (sheet) (fork-to :history) (put-image)))
                                         (if-condition (is-param :save)
                                                       (:then (put-file (sheet-content (get-file :main)) :main)
                                                              (put-image nil) (set-stable))
                                                       (:else (set-stable :not))))))
                (out (set-type :matrix :spreadsheet)
		     (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
		            	   (set-meta :locked nil)
				   (set-meta :locked t))
                     (if-condition (is-image :not)
                                   (:then (get-value :main-table) (put-image) (set-time) (fork-to :history)))
                     (sheet)))
         (clipboard (in (set-time) (put-image (clipboard (get-image))))
                    (out (set-type :form) (clipboard)
                         (if-condition (is-image :not) (:then (put-image))
                         (codec))))
         (history (in (put-image (history (get-image))))
                  (out (set-type :form) (history) (codec)))))
